1. OHMComm - Projektinformationen (Kaayy)
2. RTAudio (J0n8s)
3. CMake (Kaayy)
4. Architektur (Kaayy)
5. RTPBuffer (doe300)
(6). NetworkWrapper
(7). CPPTest-lite (doe300)
8. RTP-Protokoll (doe300)
9. Configurations-Modi / Bedienmöglichkeiten (doe300)
10. Opus (J0n8s)
11. Statistiken (J0n8s)
(12). RTCP-Protokoll(?) (doe300)




Mögliche Ablaufreihenfolge
1. OHMComm - Projektinformationen
	Anforderungen und Ziele des Projekts
2. CMake
	Aus den Zielen (Plattformunabhängigkeit) folgt die Notwendigkeit für CMake
	Probleme der Plattformunabhängigkeit (spezielle Compiler-Flags)
3. Architektur
	Schematische Darstellung mit Audio-Bib, OHMComm, Proczessoren, Netzwerk, ...
3. RTAudio
	Als Beispiel für Audio-Bibliothek
X. Alle AudioProcessors-Klassen
	5. Opus
6. RTP-Protokoll
	7. RTPBuffer setzt wissen aus RTP-Protkoll voraus, deshalb zuerst RTP-Protokoll
	8. RTPProcessor + RTPListener
10. Configurations-Modi / Bedienmöglichkeiten
11. Statistiken
	Auf Kompression mit Opus eingehen. Vgl. PCM/Opus
12. Fazit
	Ziel erreicht? Probleme bei Umsetzung? Ausblick? (RTCP, Standard)
